for mac 
download mongoDB
in terminal - sudo mv file_path /usr/local/mongodb 
open /usr/local/mongodb
cd ~
touch .bash_profile
ls -a 
open .
vim .bash_profile
i // to INSERT
export PATH=$PATH:/usr/local/mongodb/bin
esc
:wq!
mkdir -p /data/db 


or


install brew
brew tap mongodb/brew
brew install mongodb-community@6.0
sudo mkdir -p /System/Volumes/Data/data/db
sudo chown -R `id -un` /System/Volumes/Data/data/db
sudo mongod --dbpath /System/Volumes/Data/data/db
alias mongod='sudo mongod --dbpath /System/Volumes/Data/data/db'

After installation 
-> mongoDB documentation
mongoDB CRUD operation

terminal-> mongod //running mongodb server
another tab-> mongosh or mongo//accessing mongodb shell

refer mongodb documentation

creating a record/row 


test> help

  Shell Help:

    use                                        Set current database
    show                                       'show databases'/'show dbs': Print a list of all available databases.
                                               'show collections'/'show tables': Print a list of all collections for current database.
                                               'show profile': Prints system.profile information.
                                               'show users': Print a list of all users for current database.
                                               'show roles': Print a list of all roles for current database.
                                               'show log <type>': log for current connection, if type is not set uses 'global'
                                               'show logs': Print all logs.

    exit                                       Quit the MongoDB shell with exit/exit()/.exit
    quit                                       Quit the MongoDB shell with quit/quit()
    Mongo                                      Create a new connection and return the Mongo object. Usage: new Mongo(URI, options [optional])
    connect                                    Create a new connection and return the Database object. Usage: connect(URI, username [optional], password [optional])
    it                                         result of the last line evaluated; use to further iterate
    version                                    Shell version
    load                                       Loads and runs a JavaScript file into the current shell environment
    enableTelemetry                            Enables collection of anonymous usage data to improve the mongosh CLI
    disableTelemetry                           Disables collection of anonymous usage data to improve the mongosh CLI
    passwordPrompt                             Prompts the user for a password
    sleep                                      Sleep for the specified number of milliseconds
    print                                      Prints the contents of an object to the output
    printjson                                  Alias for print()
    convertShardKeyToHashed                    Returns the hashed value for the input using the same hashing function as a hashed index.
    cls                                        Clears the screen like console.clear()
    isInteractive                              Returns whether the shell will enter or has entered interactive mode

  For more information on usage: https://docs.mongodb.com/manual/reference/method
test> show dbs
admin   40.00 KiB
config  12.00 KiB
local   72.00 KiB
test> use shopDB
switched to db shopDB
shopDB> show dbs
admin   40.00 KiB
config  12.00 KiB
local   72.00 KiB
shopDB> db
shopDB
shopDB> db.products.insertOne({_id:1, name:"Pen", price: 1.20})
{ acknowledged: true, insertedId: 1 }
shopDB> show collection
MongoshInvalidInputError: [COMMON-10001] 'collection' is not a valid argument for "show".
shopDB> show collections
products
shopDB> db
shopDB
shopDB> db.products.insertOne({_id:2, name:"Pencil", price: 5.20})
{ acknowledged: true, insertedId: 2 }
shopDB> show collections
products
shopDB> 

read operation

shopDB> db.products.find({name: "Pencil"})
[ { _id: 2, name: 'Pencil', price: 5.2 } ]
shopDB> db
shopDB
shopDB> db.products.find()
[
  { _id: 1, name: 'Pen', price: 1.2 },
  { _id: 2, name: 'Pencil', price: 5.2 }
]
shopDB> db.products.find({price: {$gt: 1}})
[
  { _id: 1, name: 'Pen', price: 1.2 },
  { _id: 2, name: 'Pencil', price: 5.2 }
]
shopDB> db.products.find({_id:1}, {name:1})
[ { _id: 1, name: 'Pen' } ]
shopDB> db.products.find({_id:1}, {name:0})
[ { _id: 1, price: 1.2 } ]
shopDB> db.products.find({_id:1}, {name:1, _id:0})
[ { name: 'Pen' } ]
shopDB> db.products.find({_id:1}, {name:0, _id:0})
[ { price: 1.2 } ]
shopDB> 

update

shopDB> db.products.updateOne({_id:1},{$set:{stock:32}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
shopDB> db.products.find()
[
  { _id: 1, name: 'Pen', price: 1.2, stock: 32 },
  { _id: 2, name: 'Pencil', price: 5.2 }
]
shopDB> db.products.updateOne({_id:2},{$set:{stock:12}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
shopDB> db.products.find()
[
  { _id: 1, name: 'Pen', price: 1.2, stock: 32 },
  { _id: 2, name: 'Pencil', price: 5.2, stock: 12 }
]
shopDB> 

delete 

shopDB> db.users.deleteMany({_id=2})
... 
... 
shopDB> db.users.deleteMany({_id:2})
{ acknowledged: true, deletedCount: 0 }
shopDB> db.products.find()
[
  { _id: 1, name: 'Pen', price: 1.2, stock: 32 },
  { _id: 2, name: 'Pencil', price: 5.2, stock: 12 }
]
